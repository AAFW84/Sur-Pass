// =====================================================
// ARCHIVO: Setup.js - VERSI√ìN CORREGIDA Y OPTIMIZADA
// FUNCI√ìN PRINCIPAL ROBUSTA - Maneja todos los casos posibles
// Versi√≥n: 3.0 - Compatible con funciones.js
// =====================================================

/**
 * FUNCI√ìN PRINCIPAL ROBUSTA - Maneja todos los casos posibles
 * Asegura que todas las hojas requeridas para SurPass existan o se creen.
 * ‚úÖ OPTIMIZADO: Elimina duplicidades y mejora la validaci√≥n.
 */
function createSurPassSheets() {
    console.log('üöÄ Iniciando SurPass Setup - Versi√≥n 3.0 Corregida');

    let spreadsheet = null;
    let creadoNuevo = false;

    try {
        // PASO 1: Obtener spreadsheet con m√∫ltiples estrategias
        console.log('üìã Paso 1: Obteniendo spreadsheet...');
        const resultado = obtenerSpreadsheetRobusto();
        
        // ‚úÖ VALIDACI√ìN CR√çTICA: Verificar que el resultado sea v√°lido
        if (!resultado || typeof resultado !== 'object') {
            throw new Error('obtenerSpreadsheetRobusto() devolvi√≥ un resultado inv√°lido');
        }
        
        spreadsheet = resultado.spreadsheet;
        creadoNuevo = resultado.creadoNuevo;

        // ‚úÖ VALIDACI√ìN CR√çTICA: Verificar que spreadsheet sea v√°lido
        if (!spreadsheet) {
            throw new Error('No se pudo obtener o crear una hoja de c√°lculo v√°lida.');
        }

        // ‚úÖ VALIDACI√ìN ADICIONAL: Verificar que spreadsheet tenga m√©todos esperados
        if (typeof spreadsheet.getSheetByName !== 'function' || typeof spreadsheet.insertSheet !== 'function') {
            throw new Error('El objeto spreadsheet no tiene los m√©todos necesarios.');
        }

        console.log(`‚úÖ Spreadsheet obtenido: ${spreadsheet.getName()} (ID: ${spreadsheet.getId()})`);
        if (creadoNuevo) {
            SpreadsheetApp.getUi().alert(
                '¬°Hoja de C√°lculo Creada!',
                'Se ha creado una nueva hoja de c√°lculo para SurPass. Por favor, no cambie el nombre.',
                SpreadsheetApp.getUi().ButtonSet.OK
            );
        }

        // PASO 2: Verificar y crear hojas requeridas
        console.log('üìù Paso 2: Verificando y creando hojas requeridas...');
        const hojasRequeridas = ['Configuracion', 'Historial', 'BaseDeDatos', 'Evacuacion'];
        const hojasCreadas = [];
        const hojasExistentes = [];

        hojasRequeridas.forEach(nombreHoja => {
            let hoja = spreadsheet.getSheetByName(nombreHoja);
            if (!hoja) {
                hoja = spreadsheet.insertSheet(nombreHoja);
                hojasCreadas.push(nombreHoja);
                console.log(`‚ûï Hoja '${nombreHoja}' creada.`);
                // Opcional: Configurar encabezados por defecto para nuevas hojas
                if (nombreHoja === 'Configuracion') {
                    hoja.getRange('A1').setValue('Clave');
                    hoja.getRange('B1').setValue('Valor');
                } else if (nombreHoja === 'Historial') {
                    hoja.getRange('A1').setValue('Timestamp');
                    hoja.getRange('B1').setValue('TipoEvento');
                    hoja.getRange('C1').setValue('Detalles');
                    hoja.getRange('D1').setValue('Usuario');
                } else if (nombreHoja === 'BaseDeDatos') {
                    hoja.getRange('A1').setValue('ID');
                    hoja.getRange('B1').setValue('Nombre');
                    hoja.getRange('C1').setValue('Apellido');
                    hoja.getRange('D1').setValue('Departamento');
                    hoja.getRange('E1').setValue('Estado'); // Ej: Presente, Ausente, Evacuado
                } else if (nombreHoja === 'Evacuacion') {
                    hoja.getRange('A1').setValue('EstadoEvacuacion'); // Activa, Inactiva
                    hoja.getRange('B1').setValue('TimestampInicio');
                    hoja.getRange('C1').setValue('TimestampFin');
                    hoja.getRange('D1').setValue('TipoEvacuacion'); // Real, Simulacro
                    hoja.getRange('E1').setValue('NotasSimulacro');
                    hoja.getRange('F1').setValue('Responsable');
                }
            } else {
                hojasExistentes.push(nombreHoja);
                console.log(`‚úîÔ∏è Hoja '${nombreHoja}' ya existe.`);
            }
        });

        // PASO 3: Mensaje de √©xito final
        let mensajeFinal = '‚úÖ SurPass Setup completado con √©xito.\n\n';
        if (hojasCreadas.length > 0) {
            mensajeFinal += `Hojas creadas: ${hojasCreadas.join(', ')}.\n`;
        }
        if (hojasExistentes.length > 0) {
            mensajeFinal += `Hojas ya existentes: ${hojasExistentes.join(', ')}.\n`;
        }
        mensajeFinal += '\nEl sistema est√° listo para ser utilizado.';

        SpreadsheetApp.getUi().alert(
            '¬°Setup Completo!',
            mensajeFinal,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        console.log('üéâ SurPass Setup finalizado con √©xito.');

    } catch (error) {
        console.error('‚ùå Error cr√≠tico en createSurPassSheets:', error);
        SpreadsheetApp.getUi().alert(
            'Error de Setup',
            'Ha ocurrido un error cr√≠tico durante la configuraci√≥n de SurPass: ' + error.message + '\n\nPor favor, contacte al administrador.',
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
 * Funci√≥n auxiliar robusta para obtener o crear una hoja de c√°lculo.
 * Intenta obtener la hoja de c√°lculo activa o la crea si no existe.
 * @returns {Object} Un objeto con la hoja de c√°lculo y un booleano indicando si fue creada.
 */
function obtenerSpreadsheetRobusto() {
    let spreadsheet = null;
    let creadoNuevo = false;

    // Intento 1: Obtener la hoja de c√°lculo activa
    try {
        spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
        if (spreadsheet) {
            console.log('‚úÖ Hoja de c√°lculo activa encontrada.');
            return { spreadsheet: spreadsheet, creadoNuevo: false };
        }
    } catch (e) {
        console.warn('‚ö†Ô∏è No se pudo obtener la hoja de c√°lculo activa:', e.message);
    }

    // Intento 2: Intentar abrir por ID si hay alguna propiedad guardada (no implementado en este fragmento, pero ser√≠a el siguiente paso)
    // if (propertiesService.getUserProperties().getProperty('spreadsheetId')) { ... }

    // Intento 3: Crear una nueva hoja de c√°lculo si no se encontr√≥ ninguna
    try {
        console.log('‚öôÔ∏è Creando nueva hoja de c√°lculo...');
        spreadsheet = SpreadsheetApp.create('SurPass_Datos');
        creadoNuevo = true;
        console.log('‚úÖ Nueva hoja de c√°lculo creada con √©xito.');
        return { spreadsheet: spreadsheet, creadoNuevo: true };
    } catch (e) {
        console.error('‚ùå Error al crear nueva hoja de c√°lculo:', e.message);
        throw new Error('No se pudo obtener ni crear una hoja de c√°lculo. ' + e.message);
    }
}

/**
 * Verifica el estado completo del setup de SurPass.
 * @returns {Object} Objeto con el estado del setup.
 */
function verificarSetupCompleto() {
    console.log('üîç Verificando setup completo...');
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const hojasRequeridas = ['Configuracion', 'Historial', 'BaseDeDatos', 'Evacuacion'];
    const hojasEncontradas = [];
    const hojasFaltantes = [];
    let spreadsheetId = null;

    if (!ss) {
        return {
            success: false,
            resumen: 'No se encontr√≥ una hoja de c√°lculo activa.',
            hojasEncontradas: [],
            hojasFaltantes: hojasRequeridas,
            spreadsheetId: null
        };
    }

    spreadsheetId = ss.getId();

    hojasRequeridas.forEach(nombreHoja => {
        if (ss.getSheetByName(nombreHoja)) {
            hojasEncontradas.push(nombreHoja);
        } else {
            hojasFaltantes.push(nombreHoja);
        }
    });

    const success = hojasFaltantes.length === 0;
    const resumen = success ?
        'Todas las hojas requeridas est√°n presentes.' :
        `Faltan las siguientes hojas: ${hojasFaltantes.join(', ')}.`;

    console.log('‚úÖ Verificaci√≥n de setup completada:', { success, resumen, hojasEncontradas, hojasFaltantes });
    return {
        success: success,
        resumen: resumen,
        hojasEncontradas: hojasEncontradas,
        hojasFaltantes: hojasFaltantes,
        spreadsheetId: spreadsheetId
    };
}

/**
 * Ejecuta un diagn√≥stico de la configuraci√≥n de la UI para el setup.
 * Es una funci√≥n de alto nivel para el diagn√≥stico de la UI.
 * Se ha consolidado la l√≥gica de diagn√≥stico con `verificarSetupCompleto`.
 */
function diagnosticarSetupUI() {
    try {
        console.log('ü©∫ Ejecutando diagn√≥stico de UI para Setup...');
        const estado = verificarSetupCompleto(); // Reutilizamos la l√≥gica principal de verificaci√≥n

        let mensaje = `Estado del Setup de SurPass:\n\n`;
        mensaje += `Resumen: ${estado.resumen}\n\n`;
        mensaje += `Hojas encontradas: ${estado.hojasEncontradas.join(', ') || 'Ninguna'}\n`;
        mensaje += `Hojas faltantes: ${estado.hojasFaltantes.join(', ') || 'Ninguna'}\n`;
        if (estado.spreadsheetId) {
            mensaje += `ID de Hoja de C√°lculo: ${estado.spreadsheetId}\n`;
        }

        if (estado.success) {
            mensaje += '\nEl setup parece estar correcto. ¬°Listo para usar!';
        } else {
            mensaje += '\nSe detectaron problemas. Por favor, ejecute `createSurPassSheets()` para corregir.';
        }

        SpreadsheetApp.getUi().alert(
            'Diagn√≥stico de Setup',
            mensaje,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        console.log('Diagn√≥stico de UI para Setup finalizado.');

    } catch (error) {
        console.error('‚ùå Error ejecutando diagn√≥stico de Setup UI:', error);
        SpreadsheetApp.getUi().alert(
            'Error en Diagn√≥stico',
            'Error ejecutando diagn√≥stico: ' + error.message,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

// =====================================================
// LOGGING SIMPLE PARA SETUP (Unificado con funciones.js)
// =====================================================

/**
 * ‚úÖ FUNCI√ìN DE LOGGING SIMPLE - Para cuando funciones.js no est√© disponible
 * o para logs iniciales de setup.
 * Se recomienda usar logError de funciones.js una vez que est√© cargado.
 */
function logSimple(mensaje, nivel = 'INFO') {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [SETUP] [${nivel}] ${mensaje}`;
    console.log(logMessage);
    
    // Tambi√©n log a Google Apps Script Logger
    Logger.log(logMessage);
}

// =====================================================
// EXPORT PARA COMPATIBILIDAD
// =====================================================

/**
 * ‚úÖ FUNCI√ìN DE COMPATIBILIDAD - Para exportar configuraci√≥n setup
 */
function exportarConfiguracionSetup() {
    try {
        const estado = verificarSetupCompleto();
        const config = {
            setupCompleto: estado.success,
            hojas: estado.hojasEncontradas,
            faltantes: estado.hojasFaltantes,
            spreadsheetId: estado.spreadsheetId,
            version: '3.0',
            timestamp: new Date().toISOString()
        };
        
        console.log('üì§ Configuraci√≥n setup exportada:', config);
        return config;
        
    } catch (error) {
        console.error('‚ùå Error exportando configuraci√≥n setup:', error);
        return { error: error.message };
    }
}
